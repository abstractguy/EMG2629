#!/bin/sh
[ -z "$1" ] && echo "Error: should be run by udhcpc" && exit 1

. /lib/functions.sh
. /lib/netifd/netifd-proto.sh

set_classless_routes() {
	local max=128
	local type
	while [ -n "$1" -a -n "$2" -a $max -gt 0 ]; do
		proto_add_ipv4_route "${1%%/*}" "${1##*/}" "$2"
		max=$(($max-1))
		shift 2
	done
}

setup_interface () {
	proto_init_update "*" 1
	proto_add_ipv4_address "$ip" "${subnet:-255.255.255.0}"
	# TODO: apply $broadcast

	for i in $router; do
		proto_add_ipv4_route 0.0.0.0 0 "$i"
		route add -net 0.0.0.0/0 gw "$i"
		uci set network.$INTERFACE.isp_gw=$i
	done

	# CIDR STATIC ROUTES (rfc3442)
	[ -n "$staticroutes" ] && set_classless_routes $staticroutes
	[ -n "$msstaticroutes" ] && set_classless_routes $msstaticroutes
	##ZyXEL fix the reversed order of dnsServer ip
	local dnsOrder
	local dnsCheck
	for dnsCheck in $dns; do
		dnsOrder="$dnsCheck $dnsOrder"
	done
	for dns in $dnsOrder; do		
		proto_add_dns_server "$dns"
	done
#	for dns in $dns; do
#		proto_add_dns_server "$dns"
#	done
	for domain in $domain; do
		proto_add_dns_search "$domain"
	done
	proto_send_update "$INTERFACE"

	if [ -n "$IFACE6RD" -a -n "$ip6rd" ]; then
		local v4mask="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdprefixlen="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdprefix="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdbr="${ip6rd%% *}"

uci -q batch <<-EOF >/dev/null
set network.$IFACE6RD.proto=6rd
set network.$IFACE6RD.auto=0
set network.$IFACE6RD.peeraddr=$ip6rdbr
set network.$IFACE6RD.ip4prefixlen=$v4mask
set network.$IFACE6RD.ip6prefix=$ip6rdprefix
set network.$IFACE6RD.ip6prefixlen=$ip6rdprefixlen
commit network
EOF

		##For WAN IP Static & 6RD use DHCP
		uci delete network."$IFACE6RD"S
		uci commit network

		ifdown "$IFACE6RD"
		#/etc/init.d/network reload
		##/etc/init.d/network had be customized,so call network reload directly.
		ubus call network reload		
		ifup "$IFACE6RD"
	fi

	# TODO
	# [ -n "$ntpsrv" ] && 	change_state network "$ifc" lease_ntpsrv "$ntpsrv"
	# [ -n "$timesvr" ] && 	change_state network "$ifc" lease_timesrv "$timesvr"
	# [ -n "$hostname" ] &&	change_state network "$ifc" lease_hostname "$hostname"
	# [ -n "$timezone" ] && 	change_state network "$ifc" lease_timezone "$timezone"

	[ "$1" == "renew" ] && update_sys_dns
}

deconfig_interface() {
	proto_init_update "*" 0
	proto_send_update "$INTERFACE"
}

case "$1" in
	deconfig)
		deconfig_interface
	;;
	renew|bound)
		setup_interface $1
	;;
esac


      # Setting routing table
	local defaultWan=$(uci get network.general.defaultWan)
	local defaultWan2=""

	local d_gw=""


	local proto=$(uci get network.$defaultWan.proto)

	if [ "$proto" == "static" ] ;then
		d_gw=$(uci get network.$defaultWan.gateway)
	else
		d_gw=$(uci get network.$defaultWan.isp_gw)
	fi

	if [ "$proto" == "pppoe" ] || [ "$proto" == "pptp" ];then
		defaultWan2="$proto"-$defaultWan

		rm /tmp/wan_route4
		d_gw=""
		route -n | grep  $defaultWan2 | grep 255.255  > /tmp/wan_route4
		exec < /tmp/wan_route4
		while read line
		do
			local test=$(echo $line | awk '{print $8}' )
			local test2=$(echo $line | awk '{print $4}' )
			if [ "$test" == "$defaultWan2" ] && [ "$test2" != "UG" ] ;then
				d_gw=$(echo $line | awk '{print $1}' | tr -d '\n')
				break
			fi		
		done

		#d_gw=$(route -n | grep  $defaultWan2 | grep 255.255  | awk '{print $1}' | tr -d '\n')

		if [ "$d_gw" == "" ] ;then
			d_gw="0.0.0.0"
		fi		
	else
		defaultWan2=$(uci get network.$defaultWan.ifname)
	fi

	local chk_apmode=$(uci get system.main.system_mode)

	if [ "$chk_apmode" == "1" ];then

		ip route delete

		route add default gw $d_gw dev $defaultWan2
		uci set dhcp6c.basic.defaultWan=$defaultWan2
	##
		lan_ipaddr=$(ifconfig br-lan | awk '/inet addr/{print $2}' | awk -F':' '{print $2}')
		lan_netmask=$(ifconfig br-lan | awk '/inet addr/{print $4}' | awk -F':' '{print $2}')

		lan_ip_byte1=$(echo $lan_ipaddr | awk -F'.' '{print $1}')
		lan_mask_byte1=$(echo $lan_netmask | awk -F'.' '{print $1}')


		lan_ip_byte2=$(echo $lan_ipaddr | awk -F'.' '{print $2}')
		lan_mask_byte2=$(echo $lan_netmask | awk -F'.' '{print $2}')

		lan_ip_byte3=$(echo $lan_ipaddr | awk -F'.' '{print $3}')
		lan_mask_byte3=$(echo $lan_netmask | awk -F'.' '{print $3}')

		lan_ip_byte4=$(echo $lan_ipaddr | awk -F'.' '{print $4}')
		lan_mask_byte4=$(echo $lan_netmask | awk -F'.' '{print $4}')

		wan_ip_byte4=$(echo $wan_ip | awk -F'.' '{print $4}')
		wan_mask_byte4=$(echo $wan_mask | awk -F'.' '{print $4}')

		lan_subnet=$((lan_ip_byte1&lan_mask_byte1)).$((lan_ip_byte2&lan_mask_byte2)).$((lan_ip_byte3&lan_mask_byte3)).$((lan_ip_byte4&lan_mask_byte4))

		local prefix_str=`/bin/ipcalc.sh $lan_ipaddr $lan_netmask | grep PREFIX`
		local prefix=$(echo $prefix_str | sed 's/PREFIX=//g')

		#=====  Add route table ======================================
		local doamin1=""
		local mask1=""

		rm /tmp/wan_routex
		route -n | grep  $defaultWan2 | grep 255.255  > /tmp/wan_routex
		exec < /tmp/wan_routex
		while read line
		do
			local test=$(echo $line | awk '{print $8}')
			local test2=$(echo $line | awk '{print $4}' )	
			if [ "$test" == "$defaultWan2" ] && [ "$test2" != "UG" ] ;then
				doamin1=$(echo $line | awk '{print $1}' | tr -d '\n')
				mask1=$(echo $line | awk '{print $3}' | tr -d '\n')
				break
			fi		
		done

		ip route add $doamin1/$mask1  dev $defaultWan2 table 1
		#========================================================

		ip route add $lan_subnet/$prefix dev br-lan table 1
		ip route del default table 1
		ip route add default via $d_gw dev $defaultWan2 table 1
		ip rule del from $lan_subnet/$prefix table 1
		ip rule del to $lan_subnet/$prefix table 1
		ip rule add from $lan_subnet/$prefix table 1
		ip rule add to $lan_subnet/$prefix table 1
		
## Set route for Default Interface Group
		for iface in "" 1 2 3 4 
		do	
		grouped=$(uci get network.wan$iface.grouped)
		wan_enabled=$(uci get network.wan$iface.enable)
		default_iface=$(uci get network.wan$iface.default)
		if [ "$wan_enabled" == "1" ] ;then
			local iface2=$(uci get network.wan$iface.proto)
			if [ "$iface2" == "pppoe" ]; then
				iface3=pppoe-wan"$iface"
			else
				iface3=$(uci get network.wan$iface.ifname)
			fi
			
			if [ "$grouped" != "1" ] && [ "$default_iface" != "1" ] ; then
				rule_route=$(ip r s | grep  "$iface3 " | grep "proto kernel"  | awk -F' ' '{print $1}')
				ip route add $rule_route dev $iface3 table 1
			fi
		fi
		done
## End Set

		ip route flush cache
	fi
##
# user rules
[ -f /etc/udhcpc.user ] && . /etc/udhcpc.user

exit 0
